{"version":3,"sources":["components/Users/users.module.css","components/AddUser/adduser.module.css","API/requests.js","store/usersReducer.ts","store/postsReducer.ts","components/Users/Users.js","components/Posts/Post/Post.js","components/Posts/AddPost/AddPost.js","components/Posts/AddPost/AddPostContainer.js","components/Posts/Posts.js","components/Posts/PostsContainer.js","components/AddUser/AddUser.js","components/Sidebar/Sidebar.js","App.js","store/store.js","index.js"],"names":["module","exports","instance","axios","create","baseURL","usersAPI","get","then","res","data","name","username","avatar","setResult","params","post","success","catch","response","tweetsAPI","getTweets","createTweet","userId","content","image","initialState","id","nickname","usersReducer","state","action","type","users","postsReducer","tweets","UserCard","className","s","userCard","src","alt","usercardName","usercardUsername","connect","store","props","users_container","map","el","i","key","index","AddPost","useState","user","setUser","text","setText","setImageUrl","onClick","length","placeholder","value","onChange","e","target","api","createNewPost","dispatch","newPost","Posts","posts","find","date","publicationDate","liked","likes","likesAmount","comments","commentariesAmount","reposted","reposts","repostAmount","createPost","createPostAC","setAvatar","setName","setUsername","result","showNotification","setShowNotification","useEffect","timer","setTimeout","clearTimeout","addUserContainer","successed","unsuccessed","Sidebar","to","fetchUsers","fetchTweets","path","component","Users","AddUser","Tweets","reducers","combineReducers","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9e5f8ada.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"users_container\":\"users_users_container__EoCfW\",\"userCard\":\"users_userCard__11QOh\",\"usercardName\":\"users_usercardName__1zESt\",\"usercardUsername\":\"users_usercardUsername__3dGSj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addUserContainer\":\"adduser_addUserContainer__1sCym\",\"successed\":\"adduser_successed__zwUVD\",\"unsuccessed\":\"adduser_unsuccessed__1AWu6\"};","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL: ' https://cors-anywhere.herokuapp.com/http://domer.tech:9999/',\r\n});\r\n\r\nexport const usersAPI = {\r\n  getUsers() {\r\n    return instance.get(`users`).then((res) => res.data);\r\n  },\r\n  createUser(name, username, avatar, setResult) {\r\n    const params = {\r\n      name,\r\n      username,\r\n      avatar,\r\n    };\r\n    return instance\r\n      .post(`users`, params)\r\n      .then((res) => res.data)\r\n      .then((res) => setResult(res.success))\r\n      .catch((res) => {\r\n        setResult(res.response.data.success);\r\n      });\r\n  },\r\n};\r\n\r\nexport const tweetsAPI = {\r\n  getTweets() {\r\n    return instance.get(`tweets`).then((res) => res.data);\r\n  },\r\n  createTweet({ userId, content, image }) {\r\n    debugger;\r\n    const params = {\r\n      userId,\r\n      content,\r\n      image,\r\n    };\r\n    return instance.post(`tweets`, params).then((res) => res.data);\r\n  },\r\n};\r\n","import { Dispatch } from 'redux';\r\nimport { usersAPI } from '../API/requests';\r\n\r\nconst SET_USERS = 'SET_USERS';\r\n\r\ntype UserType = {\r\n  id: number;\r\n  name: string;\r\n  avatar: string;\r\n  nickname: string;\r\n};\r\n\r\ntype setUserACType = {\r\n  type: typeof SET_USERS;\r\n  users: Array<UserType>;\r\n};\r\n\r\nconst initialState: Array<UserType> = [\r\n  {\r\n    id: 2,\r\n    name: 'Anakin Skywalker',\r\n    avatar:\r\n      'https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg',\r\n    nickname: 'dart_vader',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Bruce Wayne',\r\n    avatar: 'https://icons.iconarchive.com/icons/diversity-avatars/avatars/256/batman-icon.png',\r\n    nickname: 'batman_official',\r\n  },\r\n];\r\n\r\nconst usersReducer = (state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case SET_USERS:\r\n      return [...action.users];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setUsersAC = (users: Array<UserType>): setUserACType => ({\r\n  users,\r\n  type: SET_USERS,\r\n});\r\n\r\nexport const fetchUsers = () => {\r\n  return (dispatch: Dispatch<setUserACType>) => {\r\n    usersAPI.getUsers().then((data) => {\r\n      dispatch(setUsersAC(data.data));\r\n    });\r\n  };\r\n};\r\n\r\nexport const setUser = (name: string, username: string, avatar: string, setResult: any) => {\r\n  return (dispatch: any) => {\r\n    usersAPI.createUser(name, username, avatar, setResult);\r\n  };\r\n};\r\n\r\nexport default usersReducer;\r\n","import { Dispatch } from 'redux';\r\nimport { tweetsAPI } from '../API/requests';\r\n\r\nconst FETCH_TWEETS = 'FETCH_TWEETS';\r\nconst CREATE_NEW_POST = 'CREATE_NEW_POST';\r\nconst LIKE_POST = 'LIKE_POST';\r\nconst REPOST = 'REPOST';\r\n\r\ntype PostType = {\r\n  userId: number;\r\n  content: string;\r\n  image: string;\r\n};\r\n\r\ntype createPostACType = {\r\n  type: typeof CREATE_NEW_POST;\r\n  post: PostType;\r\n};\r\n\r\ntype likePostACType = {\r\n  type: typeof LIKE_POST;\r\n  index: number;\r\n  liked: boolean;\r\n};\r\n\r\ntype repostACType = {\r\n  type: typeof REPOST;\r\n  index: number;\r\n  reposted: boolean;\r\n};\r\n\r\ntype fetchTweetsACType = {\r\n  type: typeof FETCH_TWEETS;\r\n  tweets: Array<PostType>;\r\n};\r\n\r\ntype actionType = createPostACType | likePostACType | repostACType | fetchTweetsACType;\r\n\r\nconst initialState: Array<PostType> = [\r\n  {\r\n    userId: 2,\r\n    content: 'Hello, world!',\r\n    image:\r\n      'https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale',\r\n  },\r\n  {\r\n    userId: 3,\r\n    content: 'Hello, everyone!',\r\n    image:\r\n      'https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale',\r\n  },\r\n];\r\n\r\nconst postsReducer = (state = initialState, action: actionType): Array<PostType> => {\r\n  switch (action.type) {\r\n    case CREATE_NEW_POST:\r\n      return [...state, { ...action.post }];\r\n    case FETCH_TWEETS:\r\n      return [...action.tweets];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const createPostAC = (post: PostType): createPostACType => ({\r\n  type: CREATE_NEW_POST,\r\n  post,\r\n});\r\n\r\nconst fetchTweetsAC = (tweets: Array<PostType>): fetchTweetsACType => ({\r\n  type: FETCH_TWEETS,\r\n  tweets,\r\n});\r\n\r\nexport const fetchTweets = () => {\r\n  return (dispatch: Dispatch<fetchTweetsACType>) => {\r\n    tweetsAPI.getTweets().then((data) => {\r\n      dispatch(fetchTweetsAC(data.data));\r\n    });\r\n  };\r\n};\r\n\r\nexport default postsReducer;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport s from './users.module.css';\r\n\r\nconst Users = (props) => {\r\n  return (\r\n    <div className={s.users_container}>\r\n      {props.users.map((el, i) => {\r\n        return <UserCard key={i} name={el.name} username={el.username} avatar={el.avatar} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const UserCard = ({ name, username, avatar }) => {\r\n  return (\r\n    <div className={s.userCard}>\r\n      <img src={avatar} alt=\"avatar\" />\r\n      <p className={s.usercardName}>{name}</p>\r\n      <p className={s.usercardUsername}>{username}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (store) => {\r\n  return {\r\n    users: store.users,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Users);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './post.css';\r\n\r\nconst Post = ({ index, name, avatar, nickname, content, image, ...props }) => {\r\n  return (\r\n    <div className=\"post_container\">\r\n      <div className=\"post_header\">\r\n        <img className=\"post_header__avatar\" src={avatar} alt=\"avatar\" />\r\n        <div className=\"post_header__name\">\r\n          <div>\r\n            {name}\r\n            <span>{nickname}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"post_body\">\r\n        {content}\r\n        {image && <img src={image} alt={image} />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, null)(Post);\r\n","import React, { useState } from 'react';\r\nimport './addpost.css';\r\n\r\nconst AddPost = (props) => {\r\n  let [user, setUser] = useState(1);\r\n  let [text, setText] = useState('');\r\n  let [image, setImageUrl] = useState('');\r\n\r\n  const changeUser = () => {\r\n    if (user < props.users.length - 1) {\r\n      setUser(++user);\r\n    } else {\r\n      setUser(0);\r\n    }\r\n  };\r\n\r\n  const submitForm = () => {\r\n    props.api.createTweet({\r\n      userId: user + 1,\r\n      content: text,\r\n      image,\r\n    });\r\n    props.createNewPost({\r\n      userId: user + 1,\r\n      content: text,\r\n      image,\r\n    });\r\n    setText('');\r\n    setImageUrl('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"addpost_container\">\r\n      <div onClick={changeUser} className=\"addpost_avatar\">\r\n        <img src={props.users[user].avatar} alt=\"avatar\" />\r\n        <span>swap user</span>\r\n      </div>\r\n      <textarea\r\n        placeholder=\"What's going on?\"\r\n        value={text}\r\n        onChange={(e) => {\r\n          setText(e.target.value);\r\n        }}\r\n      />\r\n      <input\r\n        placeholder=\"image url\"\r\n        value={image}\r\n        onChange={(e) => {\r\n          setImageUrl(e.target.value);\r\n        }}\r\n      />\r\n      <button onClick={submitForm}>Submit</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddPost;\r\n","import { connect } from 'react-redux';\r\nimport AddPost from './AddPost';\r\nimport { createPostAC } from '../../../store/postsReducer';\r\nimport { tweetsAPI } from '../../../API/requests';\r\n\r\nconst mapStateToProps = (store) => {\r\n  return {\r\n    users: store.users,\r\n    api: tweetsAPI,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    createNewPost: (newPost) => {\r\n      dispatch(createPostAC(newPost));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddPost);\r\n","import React from 'react';\r\nimport Post from './Post/Post';\r\nimport AddPost from './AddPost/AddPostContainer';\r\nimport './posts.css';\r\n\r\nconst Posts = ({ posts, users }) => {\r\n  return (\r\n    <div className=\"posts_container\">\r\n      <AddPost />\r\n      <div className=\"posts_column\">\r\n        {posts.map((post, i) => {\r\n          const user = users.find((el) => el.id === post.userId);\r\n          return (\r\n            <Post\r\n              index={i}\r\n              name={user.name}\r\n              avatar={user.avatar}\r\n              nickname={user.username}\r\n              date={post.publicationDate}\r\n              content={post.content}\r\n              image={post.image}\r\n              liked={post.liked}\r\n              likes={post.likesAmount}\r\n              comments={post.commentariesAmount}\r\n              reposted={post.reposted}\r\n              reposts={post.repostAmount}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","import Posts from './Posts';\r\nimport { connect } from 'react-redux';\r\nimport createPostAC from '../../store/postsReducer';\r\n\r\nconst mapStateToProps = (store) => {\r\n  return {\r\n    posts: store.posts,\r\n    users: store.users,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    createPost: (newPost) => {\r\n      dispatch(createPostAC(newPost));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setUser } from '../../store/usersReducer';\r\nimport s from './adduser.module.css';\r\n\r\nconst AddUser = (props) => {\r\n  const [avatar, setAvatar] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [username, setUsername] = useState('');\r\n  const [result, setResult] = useState(null);\r\n  const [showNotification, setShowNotification] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setShowNotification(true);\r\n    const timer = setTimeout(() => {\r\n      setShowNotification(false);\r\n    }, 5000);\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [result]);\r\n\r\n  return (\r\n    <div className={s.addUserContainer}>\r\n      <input\r\n        placeholder=\"Avatar Url\"\r\n        value={avatar}\r\n        onChange={(e) => {\r\n          setAvatar(e.target.value);\r\n        }}\r\n      />\r\n      <input\r\n        placeholder=\"Name\"\r\n        value={name}\r\n        onChange={(e) => {\r\n          setName(e.target.value);\r\n        }}\r\n      />\r\n      <input\r\n        placeholder=\"Username\"\r\n        value={username}\r\n        onChange={(e) => {\r\n          setUsername(e.target.value);\r\n        }}\r\n      />\r\n      <button\r\n        onClick={() => {\r\n          props.setUser(name, `@${username}`, avatar, setResult);\r\n        }}>\r\n        Add User\r\n      </button>\r\n      {showNotification &&\r\n        result !== null &&\r\n        (result ? (\r\n          <div className={s.successed}>User successfully added</div>\r\n        ) : (\r\n          <div className={s.unsuccessed}>Something went wrong</div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, { setUser })(AddUser);\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './sidebar.css';\r\n\r\nconst Sidebar = () => {\r\n  return (\r\n    <sidebar>\r\n      <NavLink to=\"/users\">Users</NavLink>\r\n      <NavLink to=\"/add-user\">Add uer</NavLink>\r\n      <NavLink to=\"/tweets\">Tweets</NavLink>\r\n    </sidebar>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { HashRouter as Router, Route } from 'react-router-dom';\r\n\r\n//\r\n// fetches\r\nimport { fetchUsers } from './store/usersReducer';\r\nimport { fetchTweets } from './store/postsReducer';\r\n\r\n//\r\n//components\r\nimport Users from './components/Users/Users';\r\nimport Tweets from './components/Posts/PostsContainer';\r\nimport AddUser from './components/AddUser/AddUser';\r\nimport Sidebar from './components/Sidebar/Sidebar';\r\n\r\n//\r\n//styles\r\nimport './App.css';\r\n\r\nconst App = (props) => {\r\n  useEffect(() => {\r\n    props.fetchUsers();\r\n    props.fetchTweets();\r\n  }, [props]);\r\n  return (\r\n    <Router>\r\n      <div className=\"app\">\r\n        <Sidebar />\r\n        <Route path=\"/users\" component={Users} />\r\n        <Route path=\"/add-user\" component={AddUser} />\r\n        <Route path=\"/tweets\" component={Tweets} />\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default connect(null, { fetchUsers, fetchTweets })(App);\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport postsReducer from './postsReducer';\r\nimport usersReducer from './usersReducer';\r\n\r\nlet reducers = combineReducers({\r\n  posts: postsReducer,\r\n  users: usersReducer,\r\n});\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nwindow.store = store;\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}